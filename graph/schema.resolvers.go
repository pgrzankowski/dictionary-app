package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"

	"github.com/pgrzankowski/dictionary-app/db"
	"github.com/pgrzankowski/dictionary-app/graph/model"
	"github.com/pgrzankowski/dictionary-app/services"
)

// CreateTranslation is the resolver for the createTranslation field.
func (r *mutationResolver) CreateTranslation(ctx context.Context, input model.NewTranslationInput) (*model.Translation, error) {
	translation, err := services.CreateTranslation(db.GormDB, ctx, input)
	if err != nil {
		return nil, err
	}

	return translation, nil
}

// RemoveTranslation is the resolver for the removeTranslation field.
func (r *mutationResolver) RemoveTranslation(ctx context.Context, id string) (bool, error) {
	removed, err := services.RemoveTranslation(db.GormDB, ctx, id)
	if err != nil {
		return false, err
	}

	return removed, nil
}

// UpdateTranslation is the resolver for the updateTranslation field.
func (r *mutationResolver) UpdateTranslation(ctx context.Context, input model.UpdateTranslationInput) (*model.Translation, error) {
	updatedTranslation, err := services.UpdateTranslation(db.GormDB, ctx, input)
	if err != nil {
		return nil, err
	}

	return updatedTranslation, nil
}

// Translations is the resolver for the translations field.
func (r *queryResolver) Translations(ctx context.Context) ([]*model.Translation, error) {
	result, err := services.Translations(db.GormDB, ctx)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// Translation is the resolver for the translation field.
func (r *queryResolver) Translation(ctx context.Context, id string) (*model.Translation, error) {
	result, err := services.Translation(db.GormDB, ctx, id)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
